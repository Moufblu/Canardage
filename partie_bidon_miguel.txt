for (int i = 0; i < nbPlayers; i++) {

         boolean isGood = false;
         do {

            System.out.println("Envoi du Board au joueur " + i);
            playersSockets.get(i).writeLine(ProtocolV1.messageBoardState());

            System.out.println("Demande une carte au joueur " + i);
            playersSockets.get(i).writeLine(ProtocolV1.YOUR_TURN);

            System.out.println("Attente d'une carte au joueur " + i);
            String answer = playersSockets.get(i).readLine();

            if (answer.contains(ProtocolV1.USE_CARD)) {
               System.out.println("Message reçu : " + answer);
               isGood = true;
            } else {
               playersSockets.get(i).writeLine(ProtocolV1.ERRORS[0]);
               System.out.println("DEGUEU");
               isGood = false;
            }
         } while (!isGood);
      }

      for (int i = 0; i < nbPlayers; i++) {

         boolean isGood = false;
         do {
            System.out.println("Demande une position au joueur " + i);
            playersSockets.get(i).writeLine(ProtocolV1.ASK_FOR_POSITION);

            System.out.println("Attente d'une position au joueur " + i);
            String answer = playersSockets.get(i).readLine();

            if (answer.contains(ProtocolV1.ASK_FOR_POSITION)) {
               System.out.println("Message reçu : " + answer);
               isGood = true;
            } else {
               playersSockets.get(i).writeLine(ProtocolV1.ERRORS[0]);
               System.out.println("DEGUEU");
               isGood = false;
            }
         } while (!isGood);
      }

      for (int i = 0; i < nbPlayers; i++) {

         System.out.println("Envoi d'une erreur bidon");
         playersSockets.get(i).writeLine(ProtocolV1.messageRefuse(1));

         System.out.println("Annonce la fin de partie au joueur " + i);
         playersSockets.get(i).writeLine(ProtocolV1.END_GAME);

         System.out.println("Ferme le client du joueur " + i);
         playersSockets.get(i).close();
      }